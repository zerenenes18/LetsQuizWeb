<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz Management</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link rel="stylesheet" href="~/css/quiz.css" />
    
    <style>

        .quiz-delete {
            display: flex;
            align-items: center; 
            justify-content: center; 
            width: 20px; 
            height: 20px; 
            background-color: #f8d7da; 
            border-radius: 15px; 
            cursor: pointer; 
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .quiz-delete:hover {
            background-color: #f5c6cb;
            transform: scale(1.1); 
        }

        .quiz-delete i {
            color: #721c24; 
            font-size: 16px; 
        }
        .quiz-card {
            display: flex;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            border-radius: 5px;
            overflow: hidden;
        }
        .rounded-icon {
            border-radius: 10px;
        }
        .quiz-info {
            width: 90%;
            padding: 10px;
            cursor: pointer;
        }

        .quiz-delete {
            width: 10%;
            background-color: #dc3545;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
        }

        .quiz-delete:hover {
            background-color: #c82333;
        }
        
        .right-panel{
            margin-bottom: 60px !important;
        }
        .left-panel{
            margin-bottom: 60px !important;
        }
    </style>
    
</head>
<body>
<div class="container">
    <div class="row">
        <!-- Sol Panel (Eski Quizler) -->
        <div class="col-md-4">
            <div class="left-panel">
                <h5 class="text-center">Existing Quizzes</h5>
                <div id="quizList">
                    
                 
                </div>
            </div>
        </div>

        <!-- SaÄŸ Panel (Yeni Quiz Ekleme) -->
        <div class="col-md-8">
            <div class="right-panel">
                <h5 class="text-center">Add New Quiz</h5>
                <form id="addQuizForm">
                    <div class="form-group">
                        <label for="lecture">Select Lecture</label>
                        <select id="lecture" class="form-control">
                          
                        </select>
                        <a href="#" id="addNewLecture" class="d-block mt-2 text-primary">New</a>
                    </div>
                    <div class="form-group">
                        <label for="quizName">Quiz Name</label>
                        <input type="text" id="quizName" class="form-control" placeholder="Enter quiz name" required>
                    </div>
                    <button type="submit" class="btn add-quiz-btn w-100">Add Quiz</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        
        const loadingIndicator = `
            <div id="loadingIndicator" class="d-flex justify-content-center align-items-center" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.8); z-index: 9999;">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        `;
        $('body').append(loadingIndicator);
        loadQuizzesAndLectures();

        function loadQuizzesAndLectures() {
            $.ajax({
                url: '/Quiz/GetQuizzesPageData',
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                },
                success: function (data) {
                   
                    $('#quizList').empty();
                    if (!data.adminQuizzesModel || data.adminQuizzesModel.length === 0) {
                        const noQuizMessage = `
                    <div class="alert alert-warning text-center" role="alert">
                        No quizzes found!
                    </div>`;
                        $('#quizList').append(noQuizMessage);
                    } else {
                        data.adminQuizzesModel.forEach(function (quiz) {
                            const quizCard = `
                        <div class="quiz-card" data-quiz-id="${quiz.quizId}" data-quiz-name="${quiz.quizName}">
                            <div class="quiz-info">
                                <h6>${quiz.quizName}</h6>
                                <p>Lecture: ${quiz.lectureName}</p>
                            </div>
                             <div class="quiz-delete">
            <i class="fas fa-trash-alt"></i> 
        </div>
                        </div>`;
                            $('#quizList').append(quizCard);
                        });
                    }

                 
                    $('#lecture').empty();
                    if (!data.lectureList || data.lectureList.length === 0) {
                        const noLectureOption = `
                    <option value="">No lectures available</option>`;
                        $('#lecture').append(noLectureOption);
                    } else {
                        data.lectureList.forEach(function (lectureName) {
                            const lectureOption = `
                        <option value="${lectureName}">${lectureName}</option>`;
                            $('#lecture').append(lectureOption);
                        });
                    }
                },
                error: function () {
                    Swal.fire('Error', 'Failed to load data!', 'error');
                },
                complete: function () {
                    $('#loadingIndicator').remove();
                }
            });
        }

        function loadQuizContent(quizName) {
            $.ajax({
                url: '/Quiz/GetQuizContent',
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                },
                data: { quizName: quizName },
                success: function (data) {
                    const rightPanel = $('.right-panel');
                    rightPanel.empty(); 

                    
                    const quizContent = `
            <div class="card shadow-lg p-4 mb-4 bg-white rounded">
                <div class="d-flex justify-content-between align-items-center">
                    <h3 class="card-title text-primary">${data.quizName}</h3>
                    <button id="addQuestionBtn" class="btn btn-success btn-sm">Add Question</button>
                </div>
                <h5 class="text-muted mb-3">Lecture: ${data.lectureName}</h5>
                <h4 class="mt-4">Questions:</h4>
                <div>
                    ${data.questions.map((question, index) => `
                        <div class="question-card border rounded p-3 my-3" style="background-color: #f9f9f9;">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="text-secondary">Question ${index + 1}</h5>
                                <div>
                                    <button class="btn btn-warning btn-sm addOptionBtn" data-question-id="${question.questionId}">Edit Option</button>
                                    <button class="btn btn-danger btn-sm deleteQuestionBtn" data-question-id="${question.questionId}">Delete</button>
                                </div>
                            </div>
                            <p><strong>${question.questionText}</strong></p>
                            ${question.questionImagePath ?
                        `<img src="${question.questionImagePath}" alt="Question Image" class="img-fluid rounded mb-2">` : ''}
                            <p><strong>Score:</strong> ${question.questionScore}</p>
                            <p><strong>Time:</strong> ${question.questionSecondTime} seconds</p>
                            <h6 class="mt-3">Options:</h6>
                           <ul class="list-group">
    ${question.options.map(option => `
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <div>
                ${option.optionText}
                ${option.optionImagePath ?
                        `<img src="${option.optionImagePath}" alt="Option Image" class="img-thumbnail ms-2" style="max-width: 50px; height: auto;">` : ''}
            </div>
            <div class="d-flex align-items-center">
                ${option.isTrue ?
                        `<span class="ms-auto text-success"><i class="fa fa-check-circle"></i> Correct</span>` : ''}
                <button class="btn btn-danger btn-sm deleteOptionBtn ms-2" data-option-id="${option.optionId}">
                    <i class="fa fa-trash"></i>
                </button>
            </div>
        </li>
    `).join('')}
</ul>
                        </div>
                    `).join('')}
                </div>
            </div>
            `;

                    rightPanel.append(quizContent);

                    // Add Question button click event
                    $('#addQuestionBtn').click(function () {
                        addNewQuestion(quizName);
                    });

                    // Add Option button click event
                    $('.addOptionBtn').click(function () {
                        const questionId = $(this).data('question-id');
                        addNewOption(questionId, quizName);
                    });

                    // Delete Question button click event
                    $('.deleteQuestionBtn').click(function () {
                        const questionId = $(this).data('question-id');
                        Swal.fire({
                            title: 'Are you sure?',
                            text: 'Do you want to delete this question?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, delete it!',
                            cancelButtonText: 'No, keep it'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $.ajax({
                                    url: '/Quiz/DeleteQuestion',
                                    method: 'DELETE',
                                    headers: {
                                        'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                                    },
                                    data: JSON.stringify({ QuestionId: questionId }),
                                    contentType: 'application/json',
                                    success: function () {
                                        Swal.fire('Deleted!', 'The question has been deleted.', 'success').then(() => {
                                            loadQuizContent(quizName); // Ä°Ã§eriÄŸi yeniden yÃ¼kle
                                        });
                                    },
                                    error: function () {
                                        Swal.fire('Error', 'Failed to delete the question.', 'error');
                                    }
                                });
                            }
                        });
                    });
                    
                    
                    

                    // Delete Option button click event
                    $('.deleteOptionBtn').click(function () {
                        const optionId = $(this).data('option-id');
                        Swal.fire({
                            title: 'Are you sure?',
                            text: 'Do you want to delete this option?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, delete it!',
                            cancelButtonText: 'No, keep it'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $.ajax({
                                    url: '/Quiz/DeleteOption',
                                    method: 'DELETE',
                                    headers: {
                                        'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                                    },
                                    data: JSON.stringify({ OptionId: optionId }),
                                    contentType: 'application/json',
                                    success: function () {
                                        Swal.fire('Deleted!', 'The option has been deleted.', 'success').then(() => {
                                            loadQuizContent(quizName); // Ä°Ã§eriÄŸi yeniden yÃ¼kle
                                        });
                                    },
                                    error: function () {
                                        Swal.fire('Error', 'Failed to delete the option.', 'error');
                                    }
                                });
                            }
                        });
                    });
                },
                error: function () {
                    Swal.fire('Error', 'Failed to load quiz content!', 'error');
                }
            });
        }


        function addNewQuestion(quizName, quizId) {
            Swal.fire({
                title: 'Add New Question',
                html: `
            <form id="addQuestionForm">
                <div class="form-group">
                    <label for="questionText">Question Text</label>
                    <input type="text" id="questionText" class="form-control" placeholder="Enter question text" required>
                </div>
                <div class="form-group">
                    <label for="questionScore">Score</label>
                    <input type="number" id="questionScore" class="form-control" placeholder="Enter score" required>
                </div>
                <div class="form-group">
                    <label for="questionTime">Time (in seconds)</label>
                    <input type="number" id="questionTime" class="form-control" placeholder="Enter time in seconds" required>
                </div>
                <div class="form-group">
                    <label for="questionImage">Question Image (optional)</label>
                    <input type="file" id="questionImage" class="form-control" accept="image/*">
                </div>
            </form>
        `,
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonText: 'Add',
                preConfirm: () => {
                    const formData = new FormData();
                    formData.append('QuizName', quizName);
                    formData.append('QuizId', quizId);
                    formData.append('Question.QuestionText', $('#questionText').val());
                    formData.append('Question.QuestionScore', $('#questionScore').val());
                    formData.append('Question.QuestionSecondTime', $('#questionTime').val());

                    const questionImage = $('#questionImage')[0].files[0];
                    if (questionImage) {
                        formData.append('QuestionImage', questionImage);
                    }

                    return formData;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const formData = result.value;

                    $.ajax({
                        url: '/Quiz/AddQuestion',
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                        },
                        processData: false,
                        contentType: false,
                        data: formData,
                        success: function () {
                            Swal.fire('Success', 'Question added successfully!', 'success');
                        },
                        error: function () {
                            Swal.fire('Error', 'Failed to add question!', 'error');
                        }
                    });
                }
            });
        }
        
        
        
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }



        function addNewOption(questionId, quizName) {
            // SeÃ§ili sorunun mevcut bilgilerini almak iÃ§in AJAX Ã§aÄŸrÄ±sÄ±
            $.ajax({
                url: '/Quiz/GetQuestionDetails',
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                },
                data: { questionId: questionId },
                success: function (question) {
                    // Mevcut seÃ§enekler formda doldurulacak
                    Swal.fire({
                        title: 'Edit Options',
                        html: `
            <form id="editOptionForm">
                <div id="optionsContainer">
                    ${question.options.map(option => `
                        <div class="form-group">
                            <label for="optionText">Option Text</label>
                            <input type="text" class="form-control optionText" value="${option.optionText}" required>
                           
                            <div class="form-check mt-2">
                                <input type="checkbox" class="form-check-input optionIsTrue" id="isTrueCheck-${option.optionId}" ${option.isTrue ? 'checked' : ''}>
                                <label class="form-check-label" for="isTrueCheck-${option.optionId}">Is True</label>
                            </div>
                        </div>
                    `).join('')}
                </div>
                <button type="button" id="addNewOption" class="btn btn-sm btn-primary mt-2" ${question.options.length >= 5 ? 'disabled' : ''}>Add New Option</button>
            </form>
        `,
                        focusConfirm: false,
                        showCancelButton: true,
                        confirmButtonText: 'Save',
                        preConfirm: () => {
                            const options = [];
                            let isTrueCount = 0;

                            $('#optionsContainer .form-group').each(function () {
                                const optionText = $(this).find('.optionText').val();
                                const escapedOptionText = escapeHtml(optionText); // HTML'yi escape et
                                const optionImage = $(this).find('.optionImage').val();
                                const isTrue = $(this).find('.optionIsTrue').is(':checked');

                                if (optionText) {
                                    options.push({
                                        OptionText: escapedOptionText, // Escape edilmiÅŸ metni kullan
                                        OptionImagePath: optionImage || null,
                                        IsTrue: isTrue
                                    });
                                    if (isTrue) isTrueCount++;
                                }
                            });

                            // DoÄŸrulama: En az bir tane ve en fazla bir tane IsTrue olmalÄ±
                            if (isTrueCount === 0) {
                                Swal.showValidationMessage('At least one option must be marked as correct (Is True).');
                                return false;
                            }
                            if (isTrueCount > 1) {
                                Swal.showValidationMessage('Only one option can be marked as correct (Is True).');
                                return false;
                            }

                            if (options.length === 0) {
                                Swal.showValidationMessage('Please add at least one option.');
                                return false;
                            }

                            return options;
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const options = result.value;

                            $.ajax({
                                url: '/Quiz/UpdateOptions',
                                method: 'POST',
                                headers: {
                                    'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                                },
                                contentType: 'application/json',
                                data: JSON.stringify({
                                    QuestionId: questionId,
                                    Options: options
                                }),
                                success: function () {
                                    Swal.fire('Success', 'Options updated successfully!', 'success').then(() => {
                                        loadQuizContent(quizName);
                                    });
                                },
                                error: function () {
                                    Swal.fire('Error', 'Failed to update options!', 'error');
                                }
                            });
                        }
                    });

                    // Dinamik olarak yeni bir seÃ§enek ekleme
                    $('#addNewOption').click(function () {
                        const currentOptionsCount = $('#optionsContainer .form-group').length;

                        if (currentOptionsCount < 5) {
                            $('#optionsContainer').append(`
                    <div class="form-group">
                        <label for="optionText">Option Text</label>
                        <input type="text" class="form-control optionText" placeholder="Enter option text" required>
                       
                        <div class="form-check mt-2">
                            <input type="checkbox" class="form-check-input optionIsTrue">
                            <label class="form-check-label">Is True</label>
                        </div>
                    </div>
                `);
                        }

                        // EÄŸer 5'ten fazla seÃ§enek varsa butonu devre dÄ±ÅŸÄ± bÄ±rak
                        if (currentOptionsCount + 1 >= 5) {
                            $(this).prop('disabled', true);
                        }
                    });
                },
                error: function () {
                    Swal.fire('Error', 'Failed to load question details!', 'error');
                }
            });
        }
       
        $(document).on('click', '.quiz-info', function () {
            const quizName = $(this).closest('.quiz-card').data('quiz-name');
            loadQuizContent(quizName);
        });

        $(document).on('click', '.quiz-delete', function () {
            const quizId = $(this).closest('.quiz-card').data('quiz-id');
            const quizName = $(this).closest('.quiz-card').data('quiz-name');

            Swal.fire({
                title: 'Are you sure?',
                text: `Do you want to delete the quiz "${quizName}"?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, keep it'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Quiz/DeleteQuiz',
                        method: 'DELETE',
                        headers: {
                            'Authorization': 'Bearer ' + localStorage.getItem('authToken'),
                        },
                        contentType: 'application/json',
                        data: JSON.stringify({ QuizId: quizId }),
                        success: function () {
                            Swal.fire('Deleted!', 'The quiz has been deleted.', 'success').then(() => {
                                loadQuizzesAndLectures();
                            });
                        },
                        error: function () {
                            Swal.fire('Error', 'Failed to delete the quiz!', 'error');
                        }
                    });
                }
            });
        });

       

        $('#addQuizForm').submit(function (e) {
            e.preventDefault(); // SayfanÄ±n yeniden yÃ¼klenmesini engeller

            const quizName = $('#quizName').val();
            const lectureName = $('#lecture').val();

            if (!quizName || !lectureName) {
                Swal.fire('Error', 'Please fill out all fields!', 'error');
                return;
            }

            const formData = {
                QuizName: quizName,
                LectureName: lectureName
            };

            $.ajax({
                url: '/Quiz/AddQuiz', // Backend API endpoint'i
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + localStorage.getItem('authToken') // Authentication token'Ä± ekleyin
                },
                contentType: 'application/json', // JSON formatÄ±nda veri gÃ¶nderiliyor
                data: JSON.stringify(formData),
                success: function () {
                    Swal.fire('Success', 'Quiz added successfully!', 'success').then(() => {
                        location.reload(); // SayfayÄ± yenileyerek listeyi gÃ¼nceller
                    });
                },
                error: function () {
                    Swal.fire('Error', 'Failed to add quiz!', 'error');
                }
            });
        });
        
        
        $('#addNewLecture').click(function (e) {
            e.preventDefault();
            Swal.fire({
                title: 'Add New Lecture',
                input: 'text',
                inputLabel: 'Lecture Name',
                inputPlaceholder: 'Enter lecture name',
                showCancelButton: true,
                confirmButtonText: 'OK',
                preConfirm: (lectureName) => {
                    if (!lectureName) {
                        Swal.showValidationMessage('Lecture name cannot be empty');
                    }
                    return lectureName;
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const lectureName = result.value;
                    // Lecture adÄ± gÃ¶nderiliyor
                    $.ajax({
                        url: '/Quiz/AddLecture',
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + localStorage.getItem('authToken')
                        },
                        data: { name: lectureName },
                        success: function () {
                            Swal.fire('Success', 'Lecture added successfully!', 'success').then(() => {
                                location.reload(); // SayfayÄ± yenile
                            });
                        },
                        error: function () {
                            Swal.fire('Error', 'Failed to add lecture!', 'error');
                        }
                    });
                }
            });
        });
    });
</script>
</body>
</html>